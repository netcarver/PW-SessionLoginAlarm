<?php

/**
 * ProcessWire Session Login Alarm Module
 *
 * Handles sending of login attempt/success emails to users.
 *
 * NB. This is *not* the same as Ryan Cramer's Login Notifier 
 * module which mainly serves to notify an administrator of successful 
 * logins. This module exists to notify the users that their account
 * has been accessed -- either successfully or unsuccessfully -- and
 * is meant mainly for higher value service sites.
 * 
 * For ProcessWire 2.x Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 *
 * TODO module priority
 * TODO headers for mail routine
 * TODO add a log of successful + failed attempt logins
 * TODO throttle rate of sending failed attempt notifications
 */

class SessionLoginAlarm extends WireData implements Module, ConfigurableModule
{
	const FAIL_ALERT_NEVER     = 0;
	const FAIL_ALERT_USER      = 1;
	const FAIL_ALERT_ALWAYS    = 2;

	const SUCCESS_ALERT_NEVER  = 0;
	const SUCCESS_ALERT_USER   = 1;
	const SUCCESS_ALERT_ALWAYS = 2;


	public static function getModuleInfo() 
	{
		return array(
			'title'     => 'Session Login Alarm', 
			'version'   => 001, 
			'summary'   => 'Handles sending of login attempt/success emails to users and/or administrators.',
			'permanent' => false, 
			'singular'  => true, 
			'autoload'  => true, 
			'author'    => 'Netcarver',
			'priority'  => 99,
		);
	}



	public function __construct() 
	{
		/**
		 * List of per-user fields to be created and installed by this module.
		 **/
		$this->new_fields = array(
			'sla_notify_fail' => array(
				'type'      => 'FieldtypeCheckbox',
				'label'     => __("Send failed login attempt notifications to user?", __FILE__),
				'addtotemp' => array( 'user' ),
			),
			'sla_notify_success' => array(
				'type'      => 'FieldtypeCheckbox',
				'label'     => __("Send login notifications to user?", __FILE__),
				'addtotemp' => array( 'user' ),
			),
			/* 'ppp_login_lastsent' => array( */
			/* 	'type'      => 'FieldtypeText', */
			/* 	'label'     => __("Time the last PPP token reminder was sent", __FILE__), */
			/* 	'set'       => array( 'collapsed' => Inputfield::collapsedHidden, ), */
			/* 	'addtotemp' => array( 'user' ), */
		);
	}


	/**
	 * Read the field data. Create the field if it doesn't exist and then
	 * add it to the fieldgroups of any listed templates.
	 **/
	protected function installField( $name, &$fd )
	{
		$f = $this->fields->get( $name );
		if( !$f ) {
			$f = new Field();
			$f->type = $this->modules->get( $fd['type'] );
			$f->name = $name;
			if( @$fd['label'] ) $f->label = $fd['label'];
			if( count( @$fd['set'] ) )
				foreach( $fd['set'] as $k => $v )
					$f->set( $k, $v );

			$f->save();

			if( count( @$fd['addtotemp'] ) ) {
				foreach( $fd['addtotemp'] as $temp ) {
					$t = $this->templates->get( $temp );
					if( !$t->id )
						continue;	// no such template.

					if( $t->fieldgroup->get( $name ) )
						continue;	// field already in template

					$t->fieldgroup->add( $f );
					$t->fieldgroup->save();
				}
			}
		}
	}



	/**
	 * Removes our setup from the PW system.
	 **/
	public function ___uninstall()
	{
		$fieldgroups_to_save = array();

		// Remove installed fields from fieldgroups...
		foreach( $this->new_fields as $name => $fd ) {
			if( count( @$fd['addtotemp'] ) ) {
				foreach( $fd['addtotemp'] as $template ) {
					$t = $this->templates->get( $template );
					if( !$t->id )
						continue;	// no such template

					if( !$t->fieldgroup->get( $name ) )
						continue;	// no such field in group

					$t->fieldgroup->remove( $name );
					$fieldgroups_to_save[ $template ] = $t->fieldgroup;
				}
			}
		}

		// Save changes to the fieldgroups...
		if( count( $fieldgroups_to_save ) ) {
			foreach( $fieldgroups_to_save as $name => $fg ) $fg->save();
		}

		// Now the fields can be deleted...
		foreach( $this->new_fields as $name => $fd ) {
			$f = $this->fields->get( $name );
			if( $f->id )
				$this->fields->delete( $f );
		}
	}


	/**
	 * Adds needed fields and sets up the per-user values needed for each existing user.
	 **/
	public function ___install()
	{
		foreach( $this->new_fields as $name => $field_data ) $this->installField( $name, $field_data );
	}



	/**
	 * Initialize the hooks
	 */
	public function init()
	{
		$this->session->addHookAfter('login', $this, 'loginHook'); 
		$this->addHookBefore('ProcessProfile::execute', $this, 'extendProfileFieldsHook' );
	}



	/**
	 * Make sure some of the additional per-user fields appear in the user profile
	 * so users get the chance to modify the settings via their profile.
	 **/
	protected function extendProfileFieldsHook(HookEvent $event)
	{
		$fields = $event->object->get('profileFields');

		if( self::FAIL_ALERT_USER == $this->sla_fail_alert /* || NULL == $this->sla_fail_alert */ )
			$fields[] = "sla_notify_fail";

		if( self::SUCCESS_ALERT_USER == $this->sla_success_alert /* || NULL == $this->sla_success_alert */ )
			$fields[] = "sla_notify_success";

		$event->object->set('profileFields', $fields );
	}



	/**
	 * Post login hook
	 */
	public function loginHook($event)
	{
		$name = strtolower($event->arguments[0]);
		if( 'guest' === $name )
			return;

		$user = $event->return; 
		if(!$user) {
			// Determine if a valid username was used => failed on password => miss-typed or hack attempt?
			$user = $this->users->get($name);
			if ($user->id ) {
				// send a failed-login attempt email to stored email address of this user (if any)
				if (
					 self::FAIL_ALERT_ALWAYS == $this->sla_fail_alert || 
					(self::FAIL_ALERT_USER   == $this->sla_fail_alert && $user->sla_notify_fail)
				)
				$this->notifyEmail($user, $this->sla_fail_subject, $this->sla_fail_body);
			}
		}
		else {
			// Send login notification email?
			if (
				 self::SUCCESS_ALERT_ALWAYS == $this->sla_success_alert || 
				(self::SUCCESS_ALERT_USER   == $this->sla_success_alert && $user->sla_notify_success)
			)
			$this->notifyEmail($user, $this->sla_success_subject, $this->sla_success_body);
		}
	}



	/**
	 * Send notification email
	 */
	protected function notifyEmail(User $user, $subject, $body)
	{
		$email = $user->email;
		if ('' == $email)
			return;

		$subject = $this->parseTags($subject, $user); 
		$body    = $this->parseTags($body, $user);

		@mail($email, $subject, $body, "From:{$email}"); 
	}



	/**
	 * Parse {tags} from $user and $_SERVER
	 */
	protected function parseTags($str, User $user, $urlencode = false) {

		if(strpos($str, '{') === false) return $str; 
		if(!preg_match_all('/\{([-_a-z0-9]+)\}/i', $str, $matches)) return $str; 

		foreach($matches[1] as $key => $tag) {

			if($tag == 'datetime') {
				$value = date($this->config->dateFormat); 

			} else if(isset($_SERVER[$tag])) {
				$value = $this->sanitizer->text($_SERVER[$tag]); 

			} else {
				$value = (string) $user->get($tag);
			}

			if($urlencode) $value = urlencode($value);
			$str = str_replace($matches[0][$key], $value, $str); 	
		}

		return $str; 
	}



	/**
	 * Default settings used by this module
	 */
	static protected $defaultSettings = array(
		'sla_fail_alert'      => self::FAIL_ALERT_NEVER,
		'sla_fail_subject'    => '{HTTP_HOST} Failed login attempt: {name}',
		'sla_fail_body'       => "Date: {datetime}\nUser: {name}\nURL: {HTTP_HOST}{REQUEST_URI}\nAgent: {HTTP_USER_AGENT}", 
		'sla_success_alert'   => self::FAIL_ALERT_NEVER,
		'sla_success_subject' => '{HTTP_HOST} Successful login: {name}',
		'sla_success_body'    => "Date: {datetime}\nUser: {name}\nURL: {HTTP_HOST}{REQUEST_URI}\nAgent: {HTTP_USER_AGENT}", 
	);



	/**
	 * Build a form allowing configuration of this Module
	 */
	static public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();
		$data   = array_merge(self::$defaultSettings, $data);
		$m      = wire('modules');

		$f = $m->get("InputfieldMarkup"); 
		$f->label = "Login Notifier Configuration Notes";
		$f->value = 
			"<p>You may specify any user field in the email subject, body or log entry by entering " . 
			"it like this: {name} - which would be the user's login name, as an example. You may also specify " . 
			"any PHP \$_SERVER var like {REMOTE_ADDR}, {HTTP_USER_AGENT}, {REQUEST_URI}, etc.</p>";
		$fields->add($f);

		// Send failed attempt emails?
		$f = $m->get('InputfieldRadios'); 
		$f->attr('name', 'sla_fail_alert'); 
		$f->label = __('Alert user on failed login attempts?', __FILE__);
		$f->addOption(self::FAIL_ALERT_NEVER, __('Never', __FILE__)); 
		$f->addOption(self::FAIL_ALERT_USER, __('Only if a user chooses in their account', __FILE__)); 
		$f->addOption(self::FAIL_ALERT_ALWAYS, __('Always', __FILE__)); 
		$f->attr('value', $data['sla_fail_alert']); 
		$fields->add($f);

		// Fail email subject
		$f = $m->get("InputfieldText"); 
		$f->attr('name', 'sla_fail_subject'); 
		$f->attr('value', $data['sla_fail_subject']); 
		$f->label = "Failed attempt email subject";
		$f->attr('value', $data['sla_fail_subject']); 
		$fields->add($f); 

		// Fail email body...
		$f = $m->get("InputfieldTextarea"); 
		$f->attr('name', 'sla_fail_body'); 
		$f->attr('value', $data['sla_fail_body']);
		$f->label = "Failed attempt email body";
		$f->description = "You may include any user fields in the email by entering the field like this: {name}. " . $description; 
		$fields->add($f);

		// Send success emails?
		$f = $m->get('InputfieldRadios'); 
		$f->attr('name', 'sla_success_alert'); 
		$f->label = __('Alert user on successful login?', __FILE__);
		$f->addOption(self::SUCCESS_ALERT_NEVER, __('Never', __FILE__)); 
		$f->addOption(self::SUCCESS_ALERT_USER, __('Only if a user chooses in their account', __FILE__)); 
		$f->addOption(self::SUCCESS_ALERT_ALWAYS, __('Always', __FILE__)); 
		$f->attr('value', $data['sla_success_alert']); 
		$fields->add($f);

		// Success email subject
		$f = $m->get("InputfieldText"); 
		$f->attr('name', 'sla_success_subject'); 
		$f->attr('value', $data['sla_success_subject']); 
		$f->label = "Successful login email subject";
		$f->attr('value', $data['sla_success_subject']); 
		$fields->add($f); 

		// Success email body...
		$f = $m->get("InputfieldTextarea"); 
		$f->attr('name', 'sla_success_body'); 
		$f->attr('value', $data['sla_success_body']);
		$f->label = "Successful login email body";
		$f->description = "You may include any user fields in the email by entering the field like this: {name}. " . $description; 
		$fields->add($f);

		/* // Logging target. */
		/* $f = $m->get("InputfieldText"); */ 
		/* $f->attr('name', 'logEntry'); */ 
		/* $f->attr('value', $data['logEntry']); */ 
		/* $f->label = "Log entry in " . wire('config')->paths->logs . "LoginNotifier.txt"; */
		/* $fields->add($f); */

		return $fields; 
	}
}

